# Embedded file name: __init__.py
# -*- coding: utf-8 -*-
import os
import sys
import time
from ATTVoip import ATTVoip, AttToneConfig
VERSION = '1.0.0'

class Keygoe():
    ROBOT_LIBRARY_SCOPE = 'GLOBAL'
    ROBOT_LIBRARY_VERSION = VERSION

    def __init__(self):
        """
        """
        self.att_voip = None
        self.att_tone_config = None
        self.dict = {}
        self.dict['DIAL_TONE'] = 'G'
        self.dict['BUSY_TONE'] = 'H'
        self.dict['HOWLER_TONE'] = 'I'
        self.dict['WAITING_TONE'] = 'J'
        self.dict['RINGING_TONE'] = 'K'
        self.dict['SECOND_DIAL_TONE'] = 'L'
        self.dict['CONGESTION_TONE'] = 'M'
        self.dict['NUMBER_UNOBTAINABLE_TONE'] = 'N'
        self.logger_pipe = None
        self.start_state = False
        return

    def _check_trunk_index(self, trunk_id):
        """
        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c \xe5\xb9\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaint
        """
        try:
            trunk_id = int(trunk_id)
            if trunk_id < 1 or trunk_id > 16:
                log_info = u'trunk_id %d\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[1,16]\u7684\u6574\u6570' % trunk_id
                self.user_info(log_info)
                raise ValueError
        except Exception as e:
            log_info = u'trunk_id %d\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[1,16]\u7684\u6574\u6570' % trunk_id
            self.user_info(log_info)
            raise RuntimeError(log_info)

        return trunk_id

    def _check_bps(self, bps_int):
        """
        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c \xe5\xb9\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbaint
        """
        try:
            bps_int = int(bps_int)
            if bps_int not in (2400, 4800, 7200, 9600, 12000, 14400):
                raise ValueError
        except ValueError as e:
            raise RuntimeError(u'bps_int\u8bbe\u7f6e\u9519\u8bef')

        return bps_int

    def _check_fax_file(self, sendfiles_list):
        """
        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8
        """
        if not isinstance(sendfiles_list, list):
            sendfiles_list = [sendfiles_list]
        for index in range(len(sendfiles_list)):
            if isinstance(sendfiles_list[index], unicode):
                try:
                    t = sendfiles_list[index].encode('ASCII')
                except Exception:
                    log_info = u'\u8def\u5f84\u53c2\u6570\u8f93\u5165\u9519\u8bef\uff0c\u76ee\u524d\u53ea\u652f\u6301ASCII\u7801\u5b57\u7b26'
                    raise RuntimeError(log_info)

                if not os.path.isfile(sendfiles_list[index]):
                    log_info = u'\u8981\u53d1\u9001\u7684\u6587\u4ef6%s\u4e0d\u5b58\u5728' % sendfiles_list[index]
                    raise RuntimeError(log_info)

    def _check_save_filename(self, filename, endwith_tuple = ()):
        """
        \xe6\xa3\x80\xe6\x9f\xa5\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84
        """
        if isinstance(filename, unicode):
            try:
                t = filename.encode('ASCII')
            except Exception:
                log_info = u'\u8def\u5f84\u53c2\u6570\u8f93\u5165\u9519\u8bef\uff0c\u76ee\u524d\u53ea\u652f\u6301ASCII\u7801\u5b57\u7b26'
                raise RuntimeError(log_info)

        if isinstance(endwith_tuple, tuple):
            if len(endwith_tuple) > 0:
                if not filename.lower().endswith(endwith_tuple):
                    log_info = u'\u6587\u4ef6\u540e\u7f00\u540d\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u6309\u7167\u53c2\u6570\u63cf\u8ff0\u8f93\u5165\u6b63\u786e\u7684\u540e\u7f00\u540d\u3002'
                    raise RuntimeError(log_info)
        path = os.path.dirname(filename)
        if not os.path.isdir(path):
            try:
                os.makedirs(path)
            except Exception:
                raise Exception(u'\u521b\u5efa\u76ee\u5f55\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u8f93\u5165\u7684\u76ee\u5f55\u662f\u5426\u6b63\u786e')

    def keygoe_set_tone_to_inifile(self, tone_name, freq, envelopemode, ontime1, offtime1 = 0, ontime2 = 0, offtime2 = 0, timedeviation = 10):
        """        
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe9\x85\x8d\xe7\xbd\xae\xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe5\x88\xb0\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x9b
        
        \xe5\x8f\x82\xe6\x95\xb0:
        
            tone_name : \xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\xe3\x80\x82
            
            \xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4["Dial_Tone"\xef\xbc\x8c"Busy_Tone"\xef\xbc\x8c"Howler_Tone"\xef\xbc\x8c"Waiting_Tone"\xef\xbc\x8c"Ringing_Tone"\xef\xbc\x8c
            "Second_Dial_Tone"\xef\xbc\x8c"Congestion_Tone"\xef\xbc\x8c"Number_Unobtainable_Tone"]
            
            freq : \xe9\xa2\x91\xe7\x8e\x87, \xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[300, 3400]
            
            envelopemode :\xe5\x8c\x85\xe7\xbb\x9c\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[0,1,2]
            
            ontime1/ontime2\xef\xbc\x9a\xe6\x8c\x81\xe7\xbb\xad\xe6\x97\xb6\xe9\x97\xb4,\xe5\x8d\x95\xe4\xbd\x8d\xe6\xaf\xab\xe7\xa7\x92, \xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[100, 5000]
            
            offtime1/offtime2 \xef\xbc\x9a\xe9\x97\xb4\xe6\x96\xad\xe6\x97\xb6\xe9\x97\xb4, \xe5\x8d\x95\xe4\xbd\x8d\xe6\xaf\xab\xe7\xa7\x92,\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[100,5000]
            
            timedeviation \xef\xbc\x9a\xe6\x97\xb6\xe9\x97\xb4\xe8\xaf\xaf\xe5\xb7\xae\xe7\x99\xbe\xe5\x88\x86\xe6\xaf\x94, \xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[0,30]
            
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
        
            1\xef\xbc\x89envelopemode:\xe7\x94\xa8\xe6\x9d\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe5\x90\x84\xe5\x8f\x96\xe5\x80\xbc\xe6\x84\x8f\xe4\xb9\x89\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
            
            0: \xe8\xa1\xa8\xe7\xa4\xba\xe6\x98\xaf\xe6\x8c\x81\xe7\xbb\xad\xe9\x9f\xb3\xe3\x80\x82\xe6\x8c\x81\xe7\xbb\xad\xe5\x93\x8dontime1\xe6\xaf\xab\xe7\xa7\x92(\xe5\xbd\x93\xe6\x97\xb6\xe6\x8c\x81\xe7\xbb\xad\xe5\x93\x8d\xe9\x93\x83\xe5\xa3\xb0\xef\xbc\x8c\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84ontime1\xe4\xb8\x8d\xe8\x83\xbd\xe5\xb0\x8f\xe4\xba\x8e\xe5\x85\xb6\xe4\xbb\x96OnTime\xef\xbc\x8c\xe4\xbb\xa5\xe9\x98\xb2\xe8\xa2\xab\xe5\x8c\x85\xe5\x90\xab)
            
            1: \xe8\xa1\xa8\xe7\xa4\xba\xe6\x98\xaf\xe4\xb8\x80\xe6\xac\xa1\xe5\x93\x8d\xe5\x81\x9c\xe9\x9f\xb3\xe3\x80\x82\xe5\x93\x8dontime1\xe6\xaf\xab\xe7\xa7\x92\xe3\x80\x81\xe5\x81\x9cofftime1\xe6\xaf\xab\xe7\xa7\x92
            
            2: \xe8\xa1\xa8\xe7\xa4\xba\xe6\x98\xaf\xe4\xba\x8c\xe6\xac\xa1\xe5\x93\x8d\xe5\x81\x9c\xe9\x9f\xb3\xe3\x80\x82\xe5\x93\x8dontime1\xe6\xaf\xab\xe7\xa7\x92\xe3\x80\x81\xe5\x81\x9cofftime1\xe6\xaf\xab\xe7\xa7\x92\xef\xbc\x8c\xe5\x86\x8d\xe5\x93\x8dontime2\xe6\xaf\xab\xe7\xa7\x92\xe3\x80\x81\xe5\x81\x9cofftime2\xe6\xaf\xab\xe7\xa7\x92
            
            2\xef\xbc\x89timedeviation: \xe7\x94\xa8\xe6\x9d\xa5\xe6\x8f\x8f\xe8\xbf\xb0\xe6\x8c\x81\xe7\xbb\xad\xe6\x97\xb6\xe9\x97\xb4\xe5\x92\x8c\xe9\x97\xb4\xe6\x96\xad\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe8\x8c\x83\xe5\x9b\xb4\xef\xbc\x8c\xe5\xbd\x93\xe5\x8c\x85\xe7\xbb\x9c\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xba1\xe5\x92\x8c2\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x94\x9f\xe6\x95\x88\xe3\x80\x82\xe8\xae\xa1\xe7\xae\x97\xe5\x85\xac\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
            
            Min_ontime1 = (OnTime * ((100 - timedeviation) / 100))
            
            Max_ontime1 = (OnTime * ((100 + timedeviation) / 100))
            
            Min_offtime1 = (OffTime * ((100 - timedeviation) / 100))
            
            Max_offtime1 = (OffTime * ((100 + timedeviation) / 100))
            
            Min_ontime2,Max_ontime2,Min_offtime2,Max_offtime2\xe5\x90\x8c\xe4\xb8\x8a\xe3\x80\x82
            
            2\xef\xbc\x89\xe8\xaf\xa5\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\xaa\xe4\xbc\x9a\xe6\x9b\xb4\xe6\x96\xb0\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe7\x9a\x84\xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe7\xab\x8b\xe5\x8d\xb3\xe6\x9b\xb4\xe6\x96\xb0\xe5\x88\xb0\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x82\xe6\x95\x85\xef\xbc\x8c
            
            \xe8\xa6\x81\xe4\xb9\x88\xe5\x9c\xa8connect_keygoe_system\xe4\xb9\x8b\xe5\x89\x8d\xe5\xae\x8c\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89\xe9\x9f\xb3\xe7\x9a\x84\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c
            
            \xe8\xa6\x81\xe4\xb9\x88\xe5\x9c\xa8\xe5\xae\x8c\xe6\x88\x90\xe6\x89\x80\xe6\x9c\x89\xe9\x9f\xb3\xe7\x9a\x84\xe9\x85\x8d\xe7\xbd\xae\xe5\x90\x8e\xe8\xb0\x83\xe7\x94\xa8\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97keygoe_update_tones_config\xe3\x80\x82
            
            3\xef\xbc\x89\xe8\xaf\xb7\xe5\xb0\xbd\xe9\x87\x8f\xe9\x81\xbf\xe5\x85\x8d\xe9\x85\x8d\xe7\xbd\xae\xe7\x9a\x84\xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe4\xb9\x8b\xe9\x97\xb4\xe5\xad\x98\xe5\x9c\xa8\xe5\x8c\x85\xe5\x90\xab\xe5\x85\xb3\xe7\xb3\xbb\xe3\x80\x82\xe5\x8c\x85\xe5\x90\xab\xe5\x85\xb3\xe7\xb3\xbb\xe4\xb8\xbe\xe4\xbe\x8b\xef\xbc\x9a
            
            \xe5\xa3\xb0\xe9\x9f\xb3A\xe3\x80\x81B\xe9\xa2\x91\xe7\x8e\x87\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe4\xb8\x94A\xef\xbc\x9aenvelopemode=0\xef\xbc\x8contime1=300\xef\xbc\x9bB\xef\xbc\x9aenvelopemode=1\xef\xbc\x8contime1=350\xef\xbc\x8cofftime1=350\xef\xbc\x9b
            
            \xe5\xbd\x93\xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe5\xa3\xb0\xe9\x9f\xb3B\xe6\x97\xb6\xef\xbc\x8c\xe4\xb8\x80\xe5\xae\x9a\xe4\xbc\x9a\xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe5\xa3\xb0\xe9\x9f\xb3B\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbaA\xe5\x8c\x85\xe5\x90\xab\xe4\xba\x8eB\xe3\x80\x82
            
            4\xef\xbc\x89\xe5\xbd\x93\xe5\x89\x8d\xe9\xbb\x98\xe8\xae\xa4\xe9\x85\x8d\xe7\xbd\xae\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
            
            Dial_Tone:
            freq = 450;
            envelopemode = 0;
            on_time1 = 500;
            timedeviation = 10;
            
            Busy_Tone:
            freq = 450;
            envelopemode = 1;
            on_time1 = 350;
            off_time1 = 350;
            timedeviation = 10;
            
            Howler_Tone:
            freq = 950;
            envelopemode = 0;
            on_time1 = 500;
            timedeviation = 10;
            
            Waiting_Tone:
            freq = 450;
            envelopemode = 1;
            on_time1 = 400;
            off_time1 = 4000;
            timedeviation = 10;
            
            Ringing_Tone:
            freq = 450;
            envelopemode = 1;
            on_time1 = 1000;
            off_time1 = 4000;
            timedeviation = 10;
            
            Second_Dial_Tone:
            freq = 450;
            envelopemode = 0;
            on_time1 = 300;
            timedeviation = 10;
            
            Congestion_Tone:
            freq = 450;
            envelopemode = 1;
            on_time1 = 700;
            off_time1 = 700;
            timedeviation = 10;
            
            Number_Unobtainable_Tone:
            freq = 450;
            envelopemode = 2;
            on_time1 = 100;
            off_time1 = 100;
            on_time2 = 400;
            off_time2 = 400;
            timedeviation = 10;
            
        Example:
        | Keygoe Set Tone To Inifile | Dial_Tone |  450  | 0 | 1000 | timedeviation=10 |
        | Keygoe Set Tone To Inifile | Busy_Tone |  450  | 1 | 350 |350 | timedeviation=10 |
        | Keygoe Set Tone To Inifile | Number_Unobtainable_Tone |  450  | 2 | 100 | 100 | 400 | 400 | timedeviation=10 |
        """
        if self.att_tone_config == None:
            self.att_tone_config = AttToneConfig()
            self.att_tone_config.start_state = self.start_state
            self.att_tone_config.log_pipe = self.logger_pipe
        tone_key = ''
        tone_name = tone_name.upper()
        if tone_name not in self.dict.keys():
            raise RuntimeError(u'tone_name\u8f93\u5165\u9519\u8bef.')
        else:
            tone_key = self.dict.get(tone_name)
        try:
            envelopemode = int(envelopemode)
            if envelopemode < 0 or envelopemode > 2:
                raise ValueError
        except Exception as e:
            raise RuntimeError(u'envelopemode\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[1,2,3]\u4e2d\u7684\u6574\u6570')

        try:
            freq = int(freq)
            if freq < 300 or freq > 3400:
                raise ValueError
        except Exception as e:
            raise RuntimeError(u'freq\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[300, 3400]\u7684\u6574\u6570')

        try:
            ontime1 = int(ontime1)
            if ontime1 < 100 or ontime1 > 5000:
                raise ValueError
        except Exception as e:
            raise RuntimeError(u'ontime1\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[100, 5000]\u7684\u6574\u6570')

        if envelopemode > 0:
            try:
                offtime1 = int(offtime1)
                if offtime1 < 100 or offtime1 > 5000:
                    raise ValueError
            except Exception as e:
                raise RuntimeError(u'offtime1\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[100,5000]\u7684\u6574\u6570')

        if envelopemode == 2:
            try:
                ontime2 = int(ontime2)
                if ontime2 < 100 or ontime2 > 5000:
                    raise ValueError
            except Exception as e:
                raise RuntimeError(u'ontime2\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[100, 5000]\u7684\u6574\u6570')

            try:
                offtime2 = int(offtime2)
                if offtime2 < 100 or offtime2 > 5000:
                    raise ValueError
            except Exception as e:
                raise RuntimeError(u'offtime2\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[100,5000]\u7684\u6574\u6570')

        try:
            timedeviation = int(timedeviation)
            if timedeviation < 0 or timedeviation > 30:
                raise ValueError
        except Exception as e:
            raise RuntimeError(u'timedeviation\u8f93\u5165\u9519\u8bef\uff0c\u8bf7\u8f93\u5165[0,30]\u7684\u6574\u6570')

        self.att_tone_config.config_some_tone(tone_key, freq, envelopemode, ontime1, offtime1, ontime2, offtime2, timedeviation)
        return

    def connect_keygoe_system(self, server_ip, port, user_name, password):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe8\xae\xbe\xe5\xa4\x87, \xe8\xbf\x9e\xe6\x8e\xa5\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xef\xbc\x9b
        
        \xe5\x8f\x82\xe6\x95\xb0:
        
            server_ip: \xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe7\x9a\x84IP\xe5\x9c\xb0\xe5\x9d\x80
            
            port: \xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe7\x9a\x84\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7
            
            user_name: \xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d
            
            password: \xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe5\xaf\x86\xe7\xa0\x81
            
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
        
            \xe4\xb8\x8d\xe7\x94\xa8\xe9\x87\x8d\xe5\xa4\x8d\xe8\xbf\x9e\xe6\x8e\xa5\xe3\x80\x81\xe6\x96\xad\xe5\xbc\x80\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8a\x8a\xe8\xbf\x9e\xe6\x8e\xa5\xe5\x92\x8c\xe6\x96\xad\xe5\xbc\x80\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x94\xbe\xe5\x9c\xa8\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x92\x8c\xe6\x8b\x86\xe9\x99\xa4\xe4\xb8\xad
        
        Example:
        | Connect Keygoe System | 192.168.2.58 | 9000 | admin | admin |
        
        """
        self.user_info(u"Keygoe语音服务器IP地址:%s" % server_ip)
        if self.att_voip != None:
            log_info = u'\u5df2\u7ecf\u521d\u59cb\u5316\uff0c\u4e0d\u7528\u91cd\u590d\u521d\u59cb\u5316\u7cfb\u7edf'
            self.user_info(log_info)
            return
        else:
            #if not check_ipaddr_validity(server_ip):
                #raise RuntimeError(u'server_ip\u5730\u5740\u4e3a\u975e\u6cd5\u5730\u5740!')
            try:
                port = int(port)
                self.user_info(u"Keygoe语音服务器端口号:%s" % str(port))
            except Exception as e:
                raise RuntimeError(u'port\u8f93\u5165\u9519\u8bef!')

            if self.att_tone_config == None:
                self.att_tone_config = AttToneConfig(self.user_info)
            self.att_tone_config.config_system_param(server_ip, port, user_name, password)
            self.att_voip = ATTVoip(self.user_info)

            return

    def disconnect_keygoe_system(self):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x85\xb3\xe9\x97\xad\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe6\x96\xad\xe5\xbc\x80\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            \xe6\x97\xa0
        
        Example:
        | Connect Keygoe System | 192.168.2.58 | 9000 | admin | admin |
        | Disconnect Keygoe System |         | 
        
        """
        if self.att_voip == None:
            log_info = u'\u672a\u521d\u59cb\u5316\u7cfb\u7edf,\u4e0d\u7528\u9000\u51fa'
            self.user_info(log_info)
            return
        else:
            self.att_voip.exit_keygoe_system()
            self.att_voip = None
            self.user_info(u"退出Keygoe语音系统成功")
            return

    def keygoe_reset_trunk(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe9\x87\x8d\xe7\xbd\xae\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x9a\xe9\x81\x93\xe8\xae\xbe\xe5\xa4\x87\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
        
        Example:
        | Keygoe Reset Trunk   |    1    |
        | Keygoe Reset Trunk   |    2    | 
        
        """
        if self.att_voip == None:
            log_info = u'\u672a\u521d\u59cb\u5316\u7cfb\u7edf'
            return
        else:
            trunk_id = self._check_trunk_index(trunk_id)
            self.att_voip.reset_trunk(trunk_id)
            return

    def keygoe_reset_all_trunk(self):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe9\x87\x8d\xe7\xbd\xae\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\xad\xe7\x9a\x84\xe5\x89\x8d\xe9\x9d\xa2\xe4\xbd\xbf\xe7\x94\xa8\xe8\xbf\x87\xe7\x9a\x84\xe9\x80\x9a\xe9\x81\x93\xe8\xae\xbe\xe5\xa4\x87\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            \xe6\x97\xa0
        
        Example:        
        | Keygoe Reset All Trunk  |        |
        
        """
        if self.att_voip == None:
            log_info = u'\u672a\u521d\u59cb\u5316\u7cfb\u7edf'
            return
        else:
            self.att_voip.reset_all_trunk()
            return

    def keygoe_call_out_offhook(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x91\xbc\xe5\x87\xba\xe6\x8b\xa8\xe5\x8f\xb7\xe5\x89\x8d\xe7\x9a\x84\xe6\x91\x98\xe6\x9c\xba\xe6\x93\x8d\xe4\xbd\x9c\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
        
        Example:
        | Keygoe Reset All Trunk    |         |
        | Keygoe Call Out Offhook   |    1    | 
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            self.user_info(log_info)
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        self.att_voip.call_out_offhook(trunk_id)
        return

    def keygoe_dial(self, trunk_id, phone_number):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x9c\xa8\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93trunk_id\xe4\xb8\x8a\xe6\x8b\xa8\xe5\x8f\xb7\xe7\xbb\x99phone_number\xe3\x80\x82\xe7\x94\xa8\xe4\xba\x8e\xe6\x91\x98\xe6\x9c\xba\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xa8\xe5\x8f\xb7\xef\xbc\x8c\xe5\x92\x8c\xe6\x8b\x8d\xe5\x8f\x89\xe4\xb9\x8b\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xa8\xe5\x8f\xb7\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            phone_number :\xe8\xa2\xab\xe5\x8f\xab\xe5\x8f\xb7\xe7\xa0\x81
        
        Example:
        | Keygoe Call Out Offhook   |    1    | 
        | Keygoe Dial               |    1    |  1003 |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            self.user_info(log_info)
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        if len(phone_number) < 3:
            log_info = u'\u8f93\u5165\u7684\u53f7\u7801\u592a\u77ed'
            self.user_info(log_info)
            raise RuntimeError(log_info)
        else:
            for item in phone_number:
                if item not in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#', 'A', 'B', 'C', 'D'):
                    log_info = u'\u8f93\u5165\u7684\u53f7\u7801\u683c\u5f0f\u6709\u8bef'
                    self.user_info(log_info)
                    raise RuntimeError(log_info)
        print phone_number
        self.att_voip.dial_by_number(trunk_id, phone_number)
        return

    def keygoe_send_dtmf(self, trunk_id, dtmf):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x8f\x91\xe9\x80\x81DTMF\xef\xbc\x8c\xe5\x8f\x91\xe9\x80\x81\xe5\xae\x8c\xe6\x88\x90\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            dtmf: DTMF\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x9b
            
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
        
            1\xe3\x80\x81\xe4\xbd\xbf\xe7\x94\xa8Keygoe Send Dtmf\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x91\xe9\x80\x81DTMF\xe7\xa0\x81\xe5\x90\x8e\xef\xbc\x8c\xe7\x94\xa8Keygoe Get Recv Dtmf\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x8e\xa5\xe6\x94\xb6DTMF\xe7\xa0\x81\xef\xbc\x8c
            \xe5\x8f\xaf\xe8\x83\xbd\xe5\xad\x98\xe5\x9c\xa8\xe4\xb8\xa2\xe5\x8f\xb7\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xef\xbc\x88\xe5\x9c\xa8\xe6\x8e\xa5\xe6\x94\xb6\xe7\xab\xaf\xe5\xbd\x95\xe9\x9f\xb3\xef\xbc\x8c\xe5\x8f\x91\xe7\x8e\xb0\xe6\x98\xaf\xe8\xaf\xa5DTMF\xe7\xa0\x81\xe7\x9a\x84\xe6\xb3\xa2\xe5\xbd\xa2\xe6\x8d\x9f\xe5\x9d\x8f\xef\xbc\x8c\xe5\xaf\xbc\xe8\x87\xb4\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe6\xb2\xa1\xe6\x9c\x89\xe8\xaf\x86\xe5\x88\xab\xef\xbc\x89\xe3\x80\x82
            
            2\xe3\x80\x81\xe7\x94\xb1\xe4\xba\x8e\xe7\xbd\x91\xe7\xbb\x9c\xe7\xad\x89\xe7\x8e\xaf\xe5\xa2\x83\xe5\x8e\x9f\xe5\x9b\xa0\xef\xbc\x8c\xe4\xb8\xa2\xe5\x8f\xb7\xe5\xb9\xb6\xe4\xb8\x8d\xe8\x83\xbd\xe5\x88\xa4\xe5\xae\x9a\xe9\x80\x9a\xe8\xaf\x9d\xe5\x8a\x9f\xe8\x83\xbd\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c\xe5\xbb\xba\xe8\xae\xae\xe5\x9c\xa8\xe7\x94\xa8\xe4\xbe\x8b\xe4\xb8\xad\xe5\x81\x9a\xe4\xb8\xa2\xe5\x8f\xb7\xe9\x87\x8d\xe5\x8f\x91\xe5\xa4\x84\xe7\x90\x86\xe3\x80\x82
            
            3\xe3\x80\x81\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8keygoe Compare Dtmf\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xa2\xe5\x8f\xb7\xe3\x80\x82
            
        
        Example:
        | Keygoe Call Out Offhook   |    1    | 
        | Keygoe Check Dial Tone    |    1    |  
        | Keygoe Dial               |    1    |  1003 |
        | Keygoe Check Call In      |    2    |  5    |
        | Keygoe Call In Offhook    |    2    |
        | Keygoe Send Dtmf          |    1    | 56789*#  |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        for item in dtmf:
            if item not in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#', 'A', 'B', 'C', 'D'):
                raise RuntimeError(u'\u8f93\u5165\u7684\u6570\u636e\u4e0d\u662fDTMF\u7801')

        if len(dtmf) > 32:
            log_info = u'\u4e0d\u652f\u6301\u5927\u4e8e32\u4f4d\u7684\u7801\u4e32'
            raise RuntimeError(log_info)

        self.att_voip.send_dtmf(trunk_id, dtmf)
        return

    def keygoe_get_recv_dtmf(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8e\xa5\xe6\x94\xb6\xe5\x88\xb0\xe7\x9a\x84DTMF\xe4\xb8\xb2\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x88DTMF\xe4\xb8\xb2\xef\xbc\x89\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x8e\xa5\xe6\x94\xb6\xe5\x88\xb0DTMF\xe7\xa0\x81\xef\xbc\x8c\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9e\xe7\xa9\xba\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2
        
        Example:
        | Keygoe Send Dtmf  | 2 | 56789*#   | 
        | ${GetDtmf}        | Keygoe Get Recv Dtmf | 1  |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)

        return self.att_voip.get_recv_dtmf(trunk_id)


    def keygoe_send_fax(self, trunk_id, sendfiles_list, bps_int, seconds = 0, recordfile_dir = '', recordfile_prefix = ''):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x8f\x91\xe9\x80\x81\xe4\xb8\x80\xe4\xb8\xaa\xe6\x88\x96\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xbc\xa0\xe7\x9c\x9f\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8f\x91\xe9\x80\x81\xe7\xbb\x93\xe6\x9d\x9f\xe5\x90\x8e\xe8\xbf\x94\xe5\x9b\x9e\xe3\x80\x82\xe8\x8b\xa5\xe8\xb6\x85\xe8\xbf\x87seconds\xe8\xbf\x98\xe6\xb2\xa1\xe5\x8f\x91\xe9\x80\x81\xe5\xae\x8c\xe6\x88\x90\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xb1\xe8\xb4\xa5\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            sendfiles_list: \xe4\xb8\x80\xe4\xb8\xaatif\xe6\x96\x87\xe4\xbb\xb6\xe5\x85\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe6\x88\x96\xe5\xa4\x9a\xe4\xb8\xaatif\xe6\x96\x87\xe4\xbb\xb6\xe5\x85\xa8\xe8\xb7\xaf\xe5\xbe\x84\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe8\xb7\xaf\xe5\xbe\x84\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x9b
            
            bps_int: \xe5\x8f\x91\xe9\x80\x81\xe9\x80\x9f\xe7\x8e\x87,\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[2400, 4800, 7200, 9600, 12000, 14400]
            
            seconds: \xe9\xa2\x84\xe7\x95\x99\xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x88\xe7\xa7\x92\xef\xbc\x89\xef\xbc\x8c0\xe8\xa1\xa8\xe7\xa4\xba\xe6\xb2\xa1\xe6\x9c\x89\xe8\xb6\x85\xe6\x97\xb6\xe9\x99\x90\xe5\x88\xb6
            
            recordfile_dir: \xe4\xbc\xa0\xe7\x9c\x9f\xe5\xbd\x95\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe7\xa9\xba
            
            recordfile_prefix\xef\xbc\x9a\xe5\xbd\x95\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe5\x89\x8d\xe7\xbc\x80\xef\xbc\x8c\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe7\xa9\xba
        
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
        
            recordfile_dir\xe4\xb8\xba\xe7\xa9\xba\xe6\x97\xb6\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xbd\x95\xe9\x9f\xb3\xe3\x80\x82\xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe4\xb8\xbe\xe4\xbe\x8b\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
            
            recordfile_dir \xe4\xb8\xba D:\\DIR\xef\xbc\x8crecordfile_prefix\xe4\xb8\xba XXX\xef\xbc\x8c\xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90
            \xe5\x8f\x91\xe9\x80\x81\xe9\x80\x9a\xe9\x81\x93\xe5\xbd\x95\xe9\x9f\xb3 D:\\DIR\\XXX_SSChannel.wav\xef\xbc\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe9\x80\x9a\xe9\x81\x93\xe5\xbd\x95\xe9\x9f\xb3 D:\\DIR\\XXX_SRChannel.wav
            
        \xe6\xb3\xa8\xe6\x84\x8f\xef\xbc\x9a
            
            \xe5\x85\x88\xe9\x85\x8d\xe7\xbd\xae\xe4\xbc\xa0\xe7\x9c\x9fECM\xe5\x8a\x9f\xe8\x83\xbd\xe4\xbd\xbf\xe8\x83\xbd\xe3\x80\x82 \xe9\x85\x8d\xe7\xbd\xae\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a
            
            \xe5\x9c\xa8keygoe\xe7\xb3\xbb\xe7\xbb\x9f\xe9\x85\x8d\xe7\xbd\xae\xe7\x95\x8c\xe9\x9d\xa2\xef\xbc\x8c\xe9\x80\x89\xe6\x8b\xa9"Keygoe \xe7\xb3\xbb\xe7\xbb\x9f"->"\xe5\xaa\x92\xe4\xbd\x93"->"\xe4\xb8\x9a\xe5\x8a\xa1\xe5\x8f\x82\xe6\x95\xb0\xe9\x85\x8d\xe7\xbd\xae"->"\xe5\x8a\x9f\xe8\x83\xbd\xe5\x8f\x82\xe6\x95\xb0\xe9\x85\x8d\xe7\xbd\xae"\xef\xbc\x8c
            \xe5\xb0\x86"\xe4\xbc\xa0\xe7\x9c\x9fECM\xe5\x8a\x9f\xe8\x83\xbd"\xe9\xa1\xb9\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba"\xe5\xb7\xb2\xe4\xbd\xbf\xe8\x83\xbd\xe2\x80\x9c\xe3\x80\x82
        
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84\xe9\xa1\xb5\xe6\x95\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xba\xe6\x95\xb4\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\x91\xe9\x80\x81\xe6\x88\x90\xe5\x8a\x9f\xe6\x97\xb6\xe8\xbf\x94\xe5\x9b\x9e\xe3\x80\x82
                  
        Example:
        | Keygoe Call Out Offhook   |    1    | 
        | Keygoe Dial               |    1    |  1003 |
        | Keygoe Check Call In      |    2    |  5    |
        | Keygoe Call In Offhook    |    2    |
        | Keygoe Start Recv Fax     |    1    | E:\\temp01.tif  | 9600  |
        | Keygoe Send Fax           |    2    | C:\\r21.tif     | 9600  | 60 |        
        | Keygoe Start Recv Fax     |    1    | E:\\temp02.tif  | 9600  |
        | ${list}                   | Create List | C:\\r21.tif | C:\\r22.tif |
        | Keygoe Send Fax           |    2    | ${list}         | 9600  | 60 |
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        self._check_fax_file(sendfiles_list)
        bps_int = self._check_bps(bps_int)
        try:
            seconds = int(seconds)
            if seconds < 0:
                raise ValueError
        except ValueError as e:
            raise RuntimeError(u'seconds\u8bbe\u7f6e\u9519\u8bef\uff0c\u8bf7\u8f93\u5165\u5927\u4e8e\u7b49\u4e8e\u96f6\u7684\u6574\u6570')

        recordfile_send = ''
        recordfile_recv = ''
        if len(recordfile_dir) > 0:
            recordfile_send = os.path.join(recordfile_dir, recordfile_prefix + '_SSChannel.wav')
            self._check_save_filename(recordfile_send)
            recordfile_recv = os.path.join(recordfile_dir, recordfile_prefix + '_SRChannel.wav')
            self._check_save_filename(recordfile_recv)

        return self.att_voip.send_fax(trunk_id, sendfiles_list, bps_int, seconds, recordfile_send, recordfile_recv)

    def keygoe_start_recv_fax(self, trunk_id, faxfile, bps_int, recordfile_dir = '', recordfile_prefix = ''):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x87\x86\xe5\xa4\x87\xe6\x8e\xa5\xe6\x94\xb6\xe4\xbc\xa0\xe7\x9c\x9f\xef\xbc\x8c\xe5\xb9\xb6\xe8\xae\xbe\xe7\xbd\xae\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            faxfile\xef\xbc\x9a\xe4\xbf\x9d\xe5\xad\x98\xe5\x85\xa8\xe8\xb7\xaf\xe5\xbe\x84, \xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6
            
            bps_int: \xe4\xbc\xa0\xe7\x9c\x9f\xe9\x80\x9f\xe7\x8e\x87\xef\xbc\x8c\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[2400, 4800, 7200, 9600, 12000, 14400]
            
            recordfile_dir: \xe4\xbc\xa0\xe7\x9c\x9f\xe5\xbd\x95\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe7\xa9\xba
            
            recordfile_prefix\xef\xbc\x9a\xe5\xbd\x95\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe5\x89\x8d\xe7\xbc\x80\xef\xbc\x8c\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba\xe7\xa9\xba
        
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
        
            recordfile_dir\xe4\xb8\xba\xe7\xa9\xba\xe6\x97\xb6\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xbd\x95\xe9\x9f\xb3\xe3\x80\x82\xe4\xb8\x8d\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe4\xb8\xbe\xe4\xbe\x8b\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
            
            recordfile_dir \xe4\xb8\xba D:\\DIR\xef\xbc\x8crecordfile_prefix\xe4\xb8\xba XXX\xef\xbc\x8c\xe4\xbc\x9a\xe7\x94\x9f\xe6\x88\x90
            \xe5\x8f\x91\xe9\x80\x81\xe9\x80\x9a\xe9\x81\x93\xe5\xbd\x95\xe9\x9f\xb3 D:\\DIR\\XXX_RSChannel.wav\xef\xbc\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe9\x80\x9a\xe9\x81\x93\xe5\xbd\x95\xe9\x9f\xb3 D:\\DIR\\XXX_RRChannel.wav
        
        Example:
        | Keygoe Call Out Offhook   |    1    | 
        | Keygoe Dial               |    1    |  1003 |
        | Keygoe Check Call In      |    2    |  5    |
        | Keygoe Call In Offhook    |    2    |
        | Keygoe Start Recv Fax     |    1    | E:\\temp01.tif  | 9600 |
        | Keygoe Send Fax           |    2    | E:\\temp.tif    | 9600 | 120 |        
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        tup = ('.tif',)
        self._check_save_filename(faxfile, tup)
        bps_int = self._check_bps(bps_int)
        recordfile_send = ''
        recordfile_recv = ''
        if len(recordfile_dir) > 0:
            recordfile_send = os.path.join(recordfile_dir, recordfile_prefix + '_RSChannel.wav')
            self._check_save_filename(recordfile_send)
            recordfile_recv = os.path.join(recordfile_dir, recordfile_prefix + '_RRChannel.wav')
            self._check_save_filename(recordfile_recv)

        self.att_voip.start_recv_fax(trunk_id, faxfile, bps_int, recordfile_send, recordfile_recv)
        return

    def keygoe_get_recv_fax_result(self, trunk_id, seconds = 3):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8e\xa5\xe6\x94\xb6\xe4\xbc\xa0\xe7\x9c\x9f\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82\xe5\x9c\xa8seconds\xe7\xa7\x92\xe5\x86\x85\xe6\xa3\x80\xe6\x9f\xa5\xe5\x88\xb0\xe6\x8e\xa5\xe6\x94\xb6\xe4\xbc\xa0\xe7\x9c\x9f\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9e\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe5\xbc\x82\xe5\xb8\xb8\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            seconds \xef\xbc\x9a\xe9\xa2\x84\xe7\x95\x99\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x88\xe7\xa7\x92\xef\xbc\x89,\xe9\xbb\x98\xe8\xae\xa43\xe7\xa7\x92
        
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe6\x8e\xa5\xe6\x94\xb6\xe7\x9a\x84\xe9\xa1\xb5\xe6\x95\xb0\xef\xbc\x8c\xe7\xb1\xbb\xe5\x9e\x8b\xe4\xb8\xba\xe6\x95\xb4\xe5\x9e\x8b\xef\xbc\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe6\x88\x90\xe5\x8a\x9f\xe6\x97\xb6\xe8\xbf\x94\xe5\x9b\x9e\xe3\x80\x82
            
        Example:
        | Keygoe Start Recv Fax      |    1    | E:\\temp01.tif  | 9600 |
        | Keygoe Send Fax            |    2    | E:\\temp.tif    | 9600 | 120 |
        | Keygoe Get Recv Fax Result |    1    |
        
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        try:
            seconds = int(seconds)
            if seconds <= 0:
                raise ValueError
        except ValueError as e:
            raise RuntimeError(u'seconds\u8bbe\u7f6e\u9519\u8bef\uff0c\u8bf7\u8f93\u5165\u5927\u4e8e\u96f6\u7684\u6574\u6570')

        return self.att_voip.get_recv_fax_result(trunk_id, seconds)

    def keygoe_check_call_in(self, trunk_id, seconds):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\xa3\x80\xe6\x9f\xa5\xe5\x9c\xa8seconds\xe7\xa7\x92\xe5\x86\x85\xe6\x98\xaf\xe5\x90\xa6\xe6\x9c\x89\xe7\x94\xb5\xe8\xaf\x9d\xe5\x91\xbc\xe5\x85\xa5\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            seconds \xef\xbc\x9a\xe9\xa2\x84\xe7\x95\x99\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x88\xe7\xa7\x92\xef\xbc\x89
        
        Example:
        | Keygoe Call Out Offhook   |    1    | 
        | Keygoe Dial               |    1    |  1003 |
        | Keygoe Check Call In      |    2    |  5    |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            self.user_info(log_info)
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        try:
            seconds = int(seconds)
            if seconds <= 0:
                raise ValueError
        except ValueError as e:
            log_info = u'seconds\u8bbe\u7f6e\u9519\u8bef\uff0c\u8bf7\u8f93\u5165\u5927\u4e8e\u96f6\u7684\u6574\u6570'
            self.user_info(log_info)
            raise RuntimeError(log_info)

        self.att_voip.check_call_in(trunk_id, seconds)
        return

    def keygoe_call_in_offhook(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\x91\x98\xe6\x9c\xba\xef\xbc\x8c\xe5\xbd\x93\xe6\x9c\x89\xe7\x94\xb5\xe8\xaf\x9d\xe5\x91\xbc\xe5\x85\xa5\xe6\x97\xb6\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
        
        Example:
        | Keygoe Call Out Offhook   |    1    | 
        | Keygoe Dial               |    1    |  1003 |
        | Keygoe Check Call In      |    2    |  5    |
        | Keygoe Call In Offhook    |    2    |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)

        self.att_voip.call_in_offhook(trunk_id)
        return

    def keygoe_onhook(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\x8c\x82\xe6\x9c\xba\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
        
        Example:
        | Keygoe Onhook    | 1  |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)

        self.att_voip.onhook(trunk_id)
        return

    def keygoe_hook_flash(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\x8b\x8d\xe5\x8f\x89\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
        
        Example:
        | Keygoe Hook Flash   | 1  |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        self.att_voip.hook_flash(trunk_id)
        return

    def keygoe_set_hook_flash_time(self, times):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe8\xae\xbe\xe7\xbd\xae\xe6\x8b\x8d\xe5\x8f\x89\xe7\xb0\xa7\xe6\x97\xb6\xe9\x97\xb4\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            times :\xe6\x8b\x8d\xe5\x8f\x89\xe7\xb0\xa7\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe6\x98\xaf20ms\xe3\x80\x82
        
        Example:
        | Keygoe Set Hook Flash Time       | 10 |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        try:
            times = int(times)
            if times <= 0:
                raise ValueError
        except ValueError as e:
            raise RuntimeError(u'times\u8bbe\u7f6e\u9519\u8bef\uff0c\u8bf7\u8f93\u5165\u5927\u4e8e\u96f6\u7684\u6574\u6570')

        self.att_voip.set_flash_time(times)
        return

    def keygoe_wait_tone(self, trunk_id, tone_name, times):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            tone_name : \xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0, \xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4["Dial_Tone"\xef\xbc\x8c"Busy_Tone"\xef\xbc\x8c"Howler_Tone"\xef\xbc\x8c
            "Waiting_Tone"\xef\xbc\x8c"Ringing_Tone"\xef\xbc\x8c"Second_Dial_Tone"\xef\xbc\x8c"Congestion_Tone"\xef\xbc\x8c"Number_Unobtainable_Tone"]
            
            times :\xe6\x9c\x80\xe9\x95\xbf\xe7\xad\x89\xe5\xbe\x85\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x88\xe7\xa7\x92\xef\xbc\x89\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4(0,300]\xe3\x80\x82
            
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe5\x9c\xa8times\xe5\x86\x85\xe6\xa3\x80\xe6\xb5\x8b\xe5\x88\xb0\xe9\x9f\xb3\xef\xbc\x8c\xe7\xab\x8b\xe5\x8d\xb3\xe8\xbf\x94\xe5\x9b\x9eTrue\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9eFalse
        
        Example:
        | ${result} | Keygoe Wait Tone  |  1  |  Dial_Tone  | 10 |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            self.user_info(log_info)
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        tone_key = ''
        tone_name = tone_name.upper()
        self.user_info(tone_name)
        if tone_name not in self.dict.keys():
            log_info = u'tone_name\u8f93\u5165\u9519\u8bef.'
            self.user_info(log_info)
            raise RuntimeError(u'tone_name\u8f93\u5165\u9519\u8bef.')
        else:
            tone_key = self.dict.get(tone_name)
        try:
            times = int(times)
            if times <= 0 or times > 300:
                raise ValueError
        except ValueError as e:
            log_info = u'times\u8bbe\u7f6e\u9519\u8bef\uff0c\u8bf7\u8f93\u5165(0,300]\u4e4b\u95f4\u7684 \
            \u6574\u6570\u3002'
            self.user_info(log_info)
            raise RuntimeError(log_info)
        return self.att_voip.wait_some_tone(trunk_id, tone_name, tone_key, times)

    def keygoe_update_tones_from_inifile(self):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe8\xaf\xbb\xe5\x8f\x96\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe5\xb0\x86\xe6\xa3\x80\xe6\xb5\x8b\xe9\x9f\xb3\xe9\x85\x8d\xe7\xbd\xae\xe4\xbf\xa1\xe6\x81\xaf\xe6\x9b\xb4\xe6\x96\xb0\xe5\x88\xb0\xe5\xba\x95\xe5\xb1\x82\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x82\xe5\x9c\xa8\xe9\x85\x8d\xe7\xbd\xae\xe5\xae\x8c\xe6\x89\x80\xe6\x9c\x89\xe5\xbe\x85\xe6\xa3\x80\xe6\xb5\x8b\xe7\x9a\x84\xe9\x9f\xb3\xe4\xb9\x8b\xe5\x90\x8e\xef\xbc\x8c\xe5\x9c\xa8\xe6\x91\x98\xe6\x9c\xba\xe6\x93\x8d\xe4\xbd\x9c\xe4\xb9\x8b\xe5\x89\x8d\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82
          
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            
            \xe6\x97\xa0
            
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe6\x97\xa0
        
        Example:        
        | Keygoe Set Tone To Inifile | Dial_Tone |  450  | 0 | 1000 | timedeviation=10 |
        | Keygoe Update Tones From Inifile |           |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)

        self.att_voip.update_tones_set()
        return

    def keygoe_start_record(self, trunk_id, recordfile):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x9c\xa8\xe6\x9f\x90\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe4\xb8\xad\xe5\x90\xaf\xe5\x8a\xa8\xe5\xbd\x95\xe9\x9f\xb3\xef\xbc\x8c\xe5\xb9\xb6\xe6\x8c\x87\xe5\xae\x9a\xe5\xbd\x95\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
            recordfile: \xe5\xbd\x95\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe4\xbf\x9d\xe5\xad\x98\xe5\x85\xa8\xe8\xb7\xaf\xe5\xbe\x84\xef\xbc\x8c\xe8\xb7\xaf\xe5\xbe\x84\xe5\x8f\xaa\xe6\x94\xaf\xe6\x8c\x81ASCII\xe7\xa0\x81\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x9b\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\xe5\x8f\xaa\xe8\x83\xbd\xe6\x98\xafvox\xe3\x80\x81pcm\xe3\x80\x81wav\xe3\x80\x82
            
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
            
            \xe5\x8f\xaa\xe8\x83\xbd\xe6\x91\x98\xe6\x9c\xba\xe7\x9a\x84\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\x8b\xe6\x89\x8d\xe8\x83\xbd\xe5\xbd\x95\xe9\x9f\xb3\xe3\x80\x82\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe5\xaf\xb9\xe4\xbc\xa0\xe7\x9c\x9f\xe5\xbd\x95\xe9\x9f\xb3\xe3\x80\x82            
                
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe6\x97\xa0
        
        Example:  
        | Keygoe Start Record | 1 | D:\\keygoe.wav   |
        | Keygoe Send Dtmf    | 2 | 56789*#          | 
        | ${GetDtmf}          | Keygoe Get Recv Dtmf | 1 |
        | Keygoe Stop Record  | 1 |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        tup = ('.vox', '.pcm', '.wav')
        self._check_save_filename(recordfile, tup)
        self.att_voip.start_record(trunk_id, recordfile)
        return

    def keygoe_stop_record(self, trunk_id):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe5\x9c\xa8\xe6\x9f\x90\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe4\xb8\xad\xe5\x81\x9c\xe6\xad\xa2\xe5\xbd\x95\xe9\x9f\xb3\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            trunk_id :\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\xa1\xe4\xb8\x8a\xe6\xa8\xa1\xe6\x8b\x9f\xe9\x80\x9a\xe9\x81\x93\xe7\xbc\x96\xe5\x8f\xb7
            
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
            
            \xe5\x8f\xaa\xe8\x83\xbd\xe6\x91\x98\xe6\x9c\xba\xe7\x9a\x84\xe7\x8a\xb6\xe6\x80\x81\xe4\xb8\x8b\xe6\x89\x8d\xe8\x83\xbd\xe5\xbd\x95\xe9\x9f\xb3\xe3\x80\x82
            
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe6\x97\xa0
        
        Example:
        | Keygoe Start Record | 1 | D:\\keygoe.wav   |
        | Keygoe Send Dtmf    | 2 | 56789*#          | 
        | ${GetDtmf}          | Keygoe Get Recv Dtmf | 1 |
        | Keygoe Stop Record  | 1 |
        
        """
        if self.att_voip == None:
            log_info = u'\u8bf7\u5148\u521d\u59cb\u5316\u7cfb\u7edf'
            raise RuntimeError(log_info)
        trunk_id = self._check_trunk_index(trunk_id)
        self.att_voip.stop_record(trunk_id)
        return

    def keygoe_compare_dtmf(self, send_dtmf, recv_dtmf, lost_count = 0):
        """
        \xe5\x8a\x9f\xe8\x83\xbd\xe6\x8f\x8f\xe8\xbf\xb0\xef\xbc\x9a\xe6\xaf\x94\xe8\xbe\x83\xe5\x8f\x91\xe9\x80\x81\xe7\x9a\x84DTMF\xe7\xa0\x81\xe5\x92\x8c\xe6\x8e\xa5\xe6\x94\xb6\xe5\x88\xb0\xe7\x9a\x84DTMF\xe7\xa0\x81\xef\xbc\x8c lost_count\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\xa2\xe5\x8f\xb7\xe4\xb8\xaa\xe6\x95\xb0\xe3\x80\x82
        
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
        
            send_dtmf :\xe5\x8f\x91\xe9\x80\x81\xe6\x96\xb9SEND\xe7\x9a\x84DTMF\xe7\xa0\x81
            
            recv_dtmf :\xe6\x8e\xa5\xe6\x94\xb6\xe6\x96\xb9RECV\xe7\x9a\x84DTMF\xe7\xa0\x81
            
            lost_count :\xe5\x85\x81\xe8\xae\xb8\xe4\xb8\xa2\xe5\x8f\xb7\xe4\xb8\xaa\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba0\xef\xbc\x8c\xe5\x8f\x96\xe5\x80\xbc\xe8\x8c\x83\xe5\x9b\xb4[0,4]
            
        \xe8\xaf\xb4\xe6\x98\x8e\xef\xbc\x9a
            
            lost_count\xe4\xb8\xban\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe5\x85\x81\xe8\xae\xb8\xe4\xb8\xa2n\xe4\xb8\xaaDTMF\xe7\xa0\x81\xe3\x80\x82\xe4\xbe\x8b\xef\xbc\x8clost_count = 2\xef\xbc\x8csend_dtmf = "1234"\xef\xbc\x8c
            \xe5\x88\x99recv_dtmf in {"1234", "123", "124", "134", "234", "12", "13", "14", "23", "24", "34"}
            \xe9\x83\xbd\xe6\x98\xaf\xe7\xac\xa6\xe5\x90\x88\xe8\xa6\x81\xe6\xb1\x82\xe7\x9a\x84\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9eTrue
            
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            
            \xe4\xb8\xa2\xe5\x8f\xb7\xe6\x83\x85\xe5\x86\xb5\xe6\xbb\xa1\xe8\xb6\xb3\xe8\xa6\x81\xe6\xb1\x82\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9eTrue\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9eFalse
        
        Example:
        | Keygoe Start Record | 1 | D:\\keygoe.wav   |
        | Keygoe Send Dtmf    | 2 | 56789*#          | 
        | ${GetDtmf}          | Keygoe Get Recv Dtmf | 1 |
        | ${ret}              | keygoe Compare Dtmf  | 56789*# | ${GetDtmf} | 1 |
        | Keygoe Stop Record  | 1 |
        
        """
        if lost_count == '' or lost_count == None:
            lost_count = 0
        try:
            lost_count = int(lost_count)
            if lost_count < 0 or lost_count > 4:
                raise ValueError
        except Exception as e:
            lost_count = 0

        send_len = len(send_dtmf)
        recv_len = len(recv_dtmf)
        if send_len > recv_len + lost_count:
            return False
        elif send_len < recv_len:
            return False
        else:
            r = 0
            for s in range(send_len):
                if recv_dtmf[r] == send_dtmf[s]:
                    r += 1
                    if r == recv_len:
                        return True
                else:
                    lost_count -= 1
                    if lost_count < 0:
                        return False

            return True

    def user_info(self, str):
        if self.logger_pipe is not None:
            if self.start_state:
                self.logger_pipe.send(str)
        else:
            return


if __name__ == '__main__':
    k = Keygoe()
    for rm in {'1234',
     '123',
     '124',
     '134',
     '2345',
     '21',
     '12',
     '13',
     '14',
     '23',
     '2',
     '34343434'}:
        print rm
        print k.keygoe_compare_dtmf('1234', rm, 8)